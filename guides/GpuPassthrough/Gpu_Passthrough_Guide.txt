How to configure PCI passthrough for VFIO on ArchLinux

To be used with the following:
https://wiki.archlinux.org/index.php/PCI_passthrough_via_OVMF

The base VM had 4 vCPU's, 8GB of RAM and was running Windows 10 on running QEMU.



VFIO configuration:

1. Force graphics output to the integrated graphics device in the UEFI.

2. Append "intel_iommu=on" in the kernel command line (cmdline)
Note: Since we're using systemd-boot, we'll need to append it to /boot/loader/entries/arch.conf

3. Find the GPU in the IOMMU groups using the iommu.sh script

4. Check the vendor-device ID pairs for the GPU and the GPU sound device. Add other devices if there are.

5. Add the pairs to /etc/modprobe.d/vfio.conf (In this case an Nvidia GTX 1060)
options vfio-pci ids=10de:1c03,10de:10f1

6. Add the required modules to /etc/mkinitcpio.conf
MODULES="... vfio vfio_iommu_type1 vfio_pci vfio_virqfd ..."

7. Recreate the initramfs (mkinitcpio -p linux)

8. Check that the PCI devices are bound by the vfio-pci drivers


VM initial configuration:

9. Install qemu, libvirt, ovmf and virt-manager according to the wiki.

10. Create a new VM based on the required needs (Ensure to use VirtIO for the block driver and net driver)
Note: Use the VirtIO drivers ISO for Windows.
Note2: For better performance, use the a partition/another block device for the VM's disk.
Note3: If NAT can't start, try to install dnsmasq and firewalld before continuing.

11. After creating the VM, add the GPU's PCI devices (GPU + HDMI audio), the USB controller and the Intel chipset onboard audio controller.

12. Install the machine initially (Without any drivers except for VirtIO)

13. Turn off the VM if turned on and add the following to the VM's config in order bypass Nvidia'a check when installing the GPU drivers:

    <hyperv>
      <relaxed state='on'/>
      <vapic state='on'/>
      <spinlocks state='on' retries='8192'/>
      <vendor_id state='on' value='123456789ab'/>
    </hyperv>
    <kvm>
      <hidden state='on'/>
    </kvm>


14. The following configuration was also used as far as CPU pinning was used. Modify to your liking:

  <vcpu placement='static'>4</vcpu>
  <cputune>
    <vcpupin vcpu='0' cpuset='4'/>
    <vcpupin vcpu='1' cpuset='5'/>
    <vcpupin vcpu='2' cpuset='6'/>
    <vcpupin vcpu='3' cpuset='7'/>
  </cputune>

  <cpu>
    <topology sockets='1' cores='4' threads='1'/>
  </cpu>

15. Turn on the VM and you should be able to install the GPU drivers.

16. Remove the the default audio interface on the VM

17. Install net-tools (Required in order to have the "arp" command)

18. Install xorg-xrandr (for display switching on the go)

19. Create a virtual network required for wireless bridging (by proxy arp) via the following link:
http://unix.stackexchange.com/questions/159191/setup-kvm-on-a-wireless-interface-on-a-laptop-machine
Note: The address of the subnet in order to avoid conflicts at the beginning was 192.168.5.96/29.

20. Create a new VirtIO NIC pointing to the virtual address. The DHCP of that address will assign it a
new address but at first it was 192.168.10.100.

21. Install Synergy on both the host and the guest. A nightly stable build for Windows was used at first and can be installed with the following link:
https://symless.com/nightly

22. Add exceptions to firewall on both the host and the guest for Synergy.

23. Copy "synergy.conf" to /etc/synergy.conf

24. Clone the Personnal-Stuff repo from Github to ~/.PersonnalStuff (https://github.com/zaclimon/Personnal-Stuff)

25. Copy the "qemu" script to /etc/libvirt/hooks (Create the directory if necessary)

26. Restart libvirtd

27. Install gnome-panel in order to create desktop shortcuts

28. Search a Windows related SVG (For the desktop launcher icon. Preferably a post Windows 8 one)

29. Execute the following command. Adjust for the desktop path on the device:
gnome-desktop-item-edit --create-new ~/Bureau

30. Adjust the launcher based on the following:
Type: Terminal application
Name: Win10
Command: sudo virsh start Win10 (Adjust to the VM name)
Icon: The icon searched previously